# GitLab CI/CD Configuration for OZO FHIR Implementation Guide

stages:
  - infrastructure
  - build
  - deploy

variables:
  # Use the pre-built Docker image from GitLab registry
  BUILDER_IMAGE: $CI_REGISTRY/headease/ozo-refererence-impl/ozo-implementation-guide/main:latest
  # Disable TLS for DinD (simplifies local runners / shared runners)
  DOCKER_TLS_CERTDIR: ""
  # Use overlay2 driver for better performance
  DOCKER_DRIVER: overlay2

# Build Docker image automatically
# This builds the Docker image used for IG builds, not the IG itself
# Leverages Docker layer caching for faster builds
build-docker-image:
  stage: infrastructure
  image: docker:24
  services:
    - docker:24-dind
  variables:
    # Override if you prefer a different network or daemon opts
    DOCKER_HOST: "tcp://docker:2375"
  before_script:
    - echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  script:
    - echo "Building Docker image with layer caching..."
    # Pull existing image to use as cache (ignore errors if not exists)
    - docker pull $BUILDER_IMAGE || true
    # Build with cache-from to leverage GitLab's Docker layer caching
    - docker build --cache-from $BUILDER_IMAGE --pull -t $BUILDER_IMAGE .
    - docker push $BUILDER_IMAGE
  rules:
    # Only rebuild Docker image when Dockerfile or entrypoint changes
    - changes:
        - Dockerfile
        - docker-entrypoint.sh

# Build the Implementation Guide on all branches
build:
  stage: build
  image:
    name: $BUILDER_IMAGE
    # Override the default entrypoint to prevent conflicts with GitLab CI's shell execution
    # GitLab CI passes commands with 'sh -c' which would conflict with docker-entrypoint.sh
    # The entrypoint still works normally when running 'docker run' from the host machine
    entrypoint: [""]
  script:
    - echo "Building OZO Implementation Guide..."
    - make build
    # Move output to public directory for GitLab Pages deployment
    - mv ./output ./public
  artifacts:
    name: "ozo-ig-${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"
    paths:
      - output/
      - public/
    expire_in: 30 days
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH

# Deploy to GitLab Pages (main branch only)
# Pages URL: https://ozo-implementation-guide-405d2b.gitlab.io
# Primary deployment is via GitHub Pages at: https://ozo-implementation-guide.headease.nl
pages:
  stage: deploy
  image: alpine:latest
  dependencies:
    - build
  script:
    - echo "Deploying Implementation Guide to GitLab Pages..."
    - test -d "./public" || (echo "Error public directory does not exist" && exit 1)
    - test "$(ls -A ./public)" || (echo "Error public directory is empty" && exit 1)
    - ls -la ./public/
    - echo "Deployment successful!"
    - echo "Pages will be available at your GitLab Pages URL after deployment"
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
